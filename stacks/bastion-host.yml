AWSTemplateFormatVersion: 2010-09-09
Description: ---
Parameters:
  NetworkVPCStack:
    Description: 'Stack name of network VPC stack'
    Type: String
  SSHKeyName:
    Description: 'key to access the instance.'
    Type: String
    Default: ''
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-0937dcc711d38ef3f'
    'eu-west-3':
      AMI: 'ami-0854d53ce963f69d8'
    'eu-north-1':
      AMI: 'ami-6d27a913'
    'eu-west-2':
      AMI: 'ami-0664a710233d7c148'
    'eu-west-1':
      AMI: 'ami-0fad7378adf284ce0'
    'ap-northeast-2':
      AMI: 'ami-018a9a930060d38aa'
    'ap-northeast-1':
      AMI: 'ami-0d7ed3ddb85b521a6'
    'sa-east-1':
      AMI: 'ami-0b04450959586da29'
    'ca-central-1':
      AMI: 'ami-0de8b8e4bc1f125fe'
    'ap-southeast-1':
      AMI: 'ami-04677bdaa3c2b6e24'
    'ap-southeast-2':
      AMI: 'ami-0c9d48b5db609ad6e'
    'eu-central-1':
      AMI: 'ami-0eaec5838478eb0ba'
    'us-east-1':
      AMI: 'ami-035be7bafff33b6b6'
    'us-east-2':
      AMI: 'ami-04328208f4f0cf1fe'
    'us-west-1':
      AMI: 'ami-0799ad445b5727125'
    'us-west-2':
      AMI: 'ami-032509850cf9ee54e'
Resources: 
  PlatoEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  PlatoSSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      VpcId: {'Fn::ImportValue': !Sub '${NetworkVPCStack}-VPC'}
      Tags:
        - Key: Name
          Value: PlatoSSHBastiionSG
  PlatoSSHLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 30
  PlatoIAMRoleSSH:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: 'ec2'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:AssociateAddress'
            Resource:
            - '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:DescribeLogStreams'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:CreateLogGroups'
            - 'logs:DescribeLogGroups'
            Resource: !GetAtt 'PlatoSSHLogs.Arn'
  PlatoSSHBastionInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref PlatoIAMRoleSSH
  PlatoSSHBastionLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: [config, awslogs]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/amazon/ssm/amazon-ssm-agent.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/amazon-ssm-agent.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/amazon/ssm/errors.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/errors.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/audit/audit.log]
                file = /var/log/audit/audit.log
                log_stream_name = {instance_id}/var/log/audit/audit.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/awslogs.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/awslogs.log
                log_stream_name = {instance_id}/var/log/awslogs.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/boot.log]
                file = /var/log/boot.log
                log_stream_name = {instance_id}/var/log/boot.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/cfn-wire.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-wire.log
                log_stream_name = {instance_id}/var/log/cfn-wire.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${PlatoSSHLogs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${PlatoSSHLogs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${PlatoSSHLogs}
                [/var/log/grubby_prune_debug]
                file = /var/log/grubby_prune_debug
                log_stream_name = {instance_id}/var/log/grubby_prune_debug
                log_group_name = ${PlatoSSHLogs}
                [/var/log/maillog]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/maillog
                log_stream_name = {instance_id}/var/log/maillog
                log_group_name = ${PlatoSSHLogs}
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${PlatoSSHLogs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${PlatoSSHLogs}
                [/var/log/yum.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/yum.log
                log_stream_name = {instance_id}/var/log/yum.log
                log_group_name = ${PlatoSSHLogs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogsd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
        config:
          packages:
            yum:
              mariadb: []
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.PlatoSSHBastionLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=PlatoSSHBastionLaunchConfiguration
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: false
      IamInstanceProfile: !Ref PlatoSSHBastionInstanceProfile
      SecurityGroups:
        - Ref: PlatoSSHSecurityGroup
      KeyName: !Ref SSHKeyName
      InstanceType: t2.nano
      ImageId: 
        Fn::FindInMap:
          - RegionMap 
          - !Ref 'AWS::Region'
          - AMI
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum update -y
          trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource PlatoSSHBastionAutoScalingGroup --region ${AWS::Region}' ERR
          INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
          aws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${PlatoEIP.AllocationId}
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource PlatoSSHBastionLaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource PlatoSSHBastionAutoScalingGroup --region ${AWS::Region}
  PlatoSSHBastionAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
    Properties:
      LaunchConfigurationName: !Ref PlatoSSHBastionLaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      VPCZoneIdentifier: 
          Fn::Split: 
            - ',' 
            - 'Fn::ImportValue': !Sub '${NetworkVPCStack}-SubnetsPublic'
      Tags:
       - PropagateAtLaunch: true
         Key: Name
         Value: !Sub
         - 'SSH bastion host/instance ${CidrBlock}'
         - CidrBlock: {'Fn::ImportValue': !Sub '${NetworkVPCStack}-VpcCidrBlock'}
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  SecurityGroup:
    Description: 'Bastion host security group'
    Value: !Ref PlatoSSHSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  IPAddress:
    Description: 'Bastion host IP address'
    Value: !Ref PlatoEIP
    Export:
      Name: !Sub '${AWS::StackName}-IPAddress'